package service

import (
	"net/http"
	"strings"
	"time"

	"github.com/jmoiron/sqlx"
	"github.com/pkg/errors"

	"github.com/syukur91/ischool-monitor/api/schema"
	"github.com/syukur91/ischool-monitor/pkg/apierror"
	"github.com/syukur91/ischool-monitor/pkg/query"
)

// {{ .Model }}Service ...
type {{ .Model }}Service struct {
	db *sqlx.DB
}

// New{{ .Model }}Service ...
func New{{ .Model }}Service(db *sqlx.DB) *{{ .Model }}Service {
	return &{{ .Model }}Service{db: db}
}

// Create{{ .Model }} ...
func (s *{{ .Model }}Service) Create{{ .Model }}(request *schema.Create{{ .Model }}Request) (*schema.{{ .Model }}Response, error) {
	if request.Nama == "" {
		return nil, apierror.NewError(http.StatusBadRequest, http.StatusBadRequest, "{{ .Model }} nama is not set", errors.New("create{{ .ModelLowerCase }}: {{ .ModelLowerCase }} nama is not set"))
	}

	if request.Deskripsi == "" {
		return nil, apierror.NewError(http.StatusBadRequest, http.StatusBadRequest, "{{ .Model }} deskripsi is not set", errors.New("create{{ .ModelLowerCase }}: {{ .ModelLowerCase }} deskripsi is not set"))
	}

	tx, err := s.db.Begin()
	if err != nil {
		return nil, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "create{{ .ModelLowerCase }}: begin transaction failed"))
	}

	id := 0
	var createdAt time.Time

	{
		stmt, err := tx.Prepare(`
			INSERT INTO public.{{ .ModelLowerCase }}s (nama, deskripsi)
			VALUES($1, $2)
			RETURNING id, created_at;
		`)

		if err != nil {
			tx.Rollback()
			return nil, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "create{{ .ModelLowerCase }}: prepare insert statement failed"))
		}
		defer stmt.Close()

		err = stmt.QueryRow(request.Nama, request.Deskripsi).Scan(&id, &createdAt)
		if err != nil {
			tx.Rollback()

			if strings.Index(err.Error(), "duplicate key value violates unique constraint \"{{ .ModelLowerCase }}_name_unique\"") > -1 {
				return nil, apierror.NewError(http.StatusBadRequest, http.StatusBadRequest, "{{ .Model }} with same nama already exists. Use different nama", errors.Wrap(err, "create{{ .ModelLowerCase }}: {{ .Model }} with same nama already exists"))
			}

			return nil, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "create{{ .ModelLowerCase }}: exec insert statement failed"))
		}
	}

	err = tx.Commit()
	if err != nil {
		return nil, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "create{{ .ModelLowerCase }}: commit transaction failed"))
	}

	return &schema.{{ .Model }}Response{
		ID:          id,
		Nama:        request.Nama,
		Deskripsi: request.Deskripsi,
		CreatedAt:   &createdAt,
	}, nil
}

// Get{{ .Model }} ...
func (s *{{ .Model }}Service) Get{{ .Model }}(id string) (*schema.{{ .Model }}Response, error) {
	if id == "" {
		return nil, apierror.NewError(http.StatusBadRequest, http.StatusBadRequest, "{{ .Model }} id is not set", errors.New("get{{ .ModelLowerCase }}: {{ .ModelLowerCase }} id is not set"))
	}

	tx, err := s.db.Beginx()
	if err != nil {
		return nil, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "get{{ .ModelLowerCase }}: begin transaction failed"))
	}

	{{ .ModelLowerCase }} := schema.{{ .Model }}Response{}
	{
		err := tx.Get(&{{ .ModelLowerCase }}, `
			SELECT id,nama,deskripsi,created_at,updated_at 
			FROM public.{{ .ModelLowerCase }}s 
			WHERE id=$1;`,
			id)

		if err != nil {
			tx.Rollback()

			if strings.Index(err.Error(), "sql: no rows in result set") > -1 {
				return nil, apierror.NewError(http.StatusNotFound, http.StatusNotFound, "{{ .Model }} with id: "+id+" is not exists", errors.Wrap(err, "get{{ .ModelLowerCase }}: {{ .ModelLowerCase }} with id: "+id+" is not exists"))
			}

			return nil, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "get{{ .ModelLowerCase }}: get data failed"))
		}
	}

	err = tx.Commit()
	if err != nil {
		return nil, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "get{{ .ModelLowerCase }}: commit transaction failed"))
	}

	return &{{ .ModelLowerCase }}, nil
}

// List{{ .Model }}s ...
func (s *{{ .Model }}Service) List{{ .Model }}s(gridParams *query.GridParams) ([]schema.{{ .Model }}Response, int, error) {

	tx, err := s.db.Beginx()
	if err != nil {
		return nil, 0, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "list{{ .ModelLowerCase }}: begin transaction failed"))
	}

	{{ .ModelLowerCase }}s := []schema.{{ .Model }}Response{}
	total := 0
	{
		dataStatement := "SELECT id,nama,deskripsi,created_at,updated_at FROM public.{{ .ModelLowerCase }}s"
		dataQuery, dataParams := query.FullQuery(gridParams, "", nil)
		err := tx.Select(&{{ .ModelLowerCase }}s, dataStatement+dataQuery, dataParams...)
		if err != nil {
			tx.Rollback()
			return nil, 0, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "list{{ .ModelLowerCase }}: get data failed"))
		}

		countStatement := "SELECT count(*) FROM public.{{ .ModelLowerCase }}s"
		countQuery, countParams := query.FilterQuery(gridParams, "", nil)
		err = tx.QueryRow(countStatement+countQuery, countParams...).Scan(&total)
		if err != nil {
			tx.Rollback()
			return nil, 0, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "list{{ .ModelLowerCase }}: get count failed"))
		}
	}

	err = tx.Commit()
	if err != nil {
		return nil, 0, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "get{{ .ModelLowerCase }}: commit transaction failed"))
	}

	return {{ .ModelLowerCase }}s, total, nil
}

// Update{{ .Model }} ...
func (s *{{ .Model }}Service) Update{{ .Model }}(id string, request *schema.Update{{ .Model }}Request) (*schema.{{ .Model }}Response, error) {
	if id == "" {
		return nil, apierror.NewError(http.StatusBadRequest, http.StatusBadRequest, "{{ .Model }} id is not set", errors.New("update{{ .ModelLowerCase }}: {{ .ModelLowerCase }} id is not set"))
	}

	tx, err := s.db.Beginx()
	if err != nil {
		return nil, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "update{{ .ModelLowerCase }}: begin transaction failed"))
	}

	// get existing {{ .ModelLowerCase }}
	{{ .ModelLowerCase }} := schema.{{ .Model }}Response{}
	{
		err := tx.Get(&{{ .ModelLowerCase }}, `
			SELECT id,nama,deskripsi,created_at,updated_at 
			FROM public.{{ .ModelLowerCase }}s 
			WHERE id=$1;`,
			id)

		if err != nil {
			tx.Rollback()

			if strings.Index(err.Error(), "sql: no rows in result set") > -1 {
				return nil, apierror.NewError(http.StatusNotFound, http.StatusNotFound, "{{ .Model }} with id: "+id+" is not exists", errors.Wrap(err, "update{{ .ModelLowerCase }}: {{ .ModelLowerCase }} with id: "+id+" is not exists"))
			}

			return nil, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "update{{ .ModelLowerCase }}: get data failed"))
		}
	}

	// update {{ .ModelLowerCase }}
	var updatedAt time.Time
	{
		// only update if not empty
		if request.Nama != "" {
			{{ .ModelLowerCase }}.Nama = request.Nama
		}

		if request.Deskripsi != "" {
			{{ .ModelLowerCase }}.Deskripsi = request.Deskripsi
		}

		err := tx.QueryRow(`
			UPDATE public.{{ .ModelLowerCase }}s SET nama=$1,deskripsi=$2,updated_at=DEFAULT
			WHERE id=$3 returning updated_at `,
			{{ .ModelLowerCase }}.Nama, {{ .ModelLowerCase }}.Deskripsi, id).Scan(&updatedAt)

		if err != nil {
			tx.Rollback()

			return nil, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "update{{ .ModelLowerCase }}: update data failed"))
		}
	}

	err = tx.Commit()
	if err != nil {
		return nil, apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "update{{ .ModelLowerCase }}: commit transaction failed"))
	}

	return &schema.{{ .Model }}Response{
		ID:          {{ .ModelLowerCase }}.ID,
		Nama:        {{ .ModelLowerCase }}.Nama,
		Deskripsi: {{ .ModelLowerCase }}.Deskripsi,
		CreatedAt:   {{ .ModelLowerCase }}.CreatedAt,
		UpdatedAt:   &updatedAt,
	}, nil
}

// Delete{{ .Model }} ...
func (s *{{ .Model }}Service) Delete{{ .Model }}(id string) error {
	if id == "" {
		return apierror.NewError(http.StatusBadRequest, http.StatusBadRequest, "{{ .Model }} id is not set", errors.New("delete{{ .ModelLowerCase }}: {{ .ModelLowerCase }} id is not set"))
	}

	tx, err := s.db.Beginx()
	if err != nil {
		return apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "delete{{ .ModelLowerCase }}: begin transaction failed"))
	}

	var rows int64
	{
		result, err := tx.Exec(`
			DELETE FROM public.{{ .ModelLowerCase }}s 
			WHERE id=$1`,
			id)
		rows, _ = result.RowsAffected()

		if err != nil {
			tx.Rollback()
			return apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "delete{{ .ModelLowerCase }}: delete data failed"))
		}
	}

	err = tx.Commit()
	if err != nil {
		return apierror.NewError(http.StatusInternalServerError, http.StatusInternalServerError, "Database transaction failed", errors.Wrap(err, "delete{{ .ModelLowerCase }}: commit transaction failed"))
	}

	if rows == 0 {
		return apierror.NewError(http.StatusNotFound, http.StatusNotFound, "{{ .Model }} with id: "+id+" is not exists", errors.Wrap(err, "delete{{ .ModelLowerCase }}: {{ .ModelLowerCase }} with id: "+id+" is not exists"))
	}

	return nil
}
